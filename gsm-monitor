#!/bin/bash

set -e
set -u

# Set debug mode
set -xv

# read frequency from command line
# if no frequency is provided, then exit with code 1
if [ $# -eq 0 ]; then
    echo "usage: $0 <frequency>"
    exit 1
fi

FREQUENCY=$1

# trap to kill all background processes when the script exits, 
# https://mywiki.wooledge.org/SignalTrap#Special_Note_On_SIGINT_and_SIGQUIT
# https://stackoverflow.com/questions/360201/how-do-i-kill-background-processes-jobs-when-my-shell-script-exits
trap 'kill $(jobs -p)' EXIT

start_tshark() {
  # Use a timestamp for the filename
  local timestamp
  timestamp=$(date +%s)

  # Start capture and parallely run grgsm_livemon
  tshark -i lo -f udp -w - | tshark -r - -l -Y 'gsm_a.rr.algorithm_identifier' \
    -T fields -e frame.number -e frame.time -e gsm_a.rr.algorithm_identifier \
    -E header=y -E separator=, -E quote=d -E occurrence=f \
    > /output/tshark_"$timestamp"_test.csv &
}

start_grgsm_livemon(){
  grgsm_livemon_headless -f "$FREQUENCY" -g 40 > /dev/null &
}

# watchdog function to check if grgsm_livemon and tshark are running
# if not then restart grgsm_livemon and tshark
# if both are running then check if tshark is receiving packets
watchdog() {
    # check if tshark is running
    if ! pgrep "tshark" > /dev/null; then
        echo "Restarting tshark"
        start_tshark
    fi

    # check if grgsm_livemon is running
    if ! pgrep -f "grgsm_livemon" > /dev/null; then
        echo "Restarting grgsm_livemon"
        start_grgsm_livemon
        # The check below, which would restart grgsm_livemon if no packets are
        # received, is not needed if we already restart grgsm_livemon here.
        return
    fi

    # run tshark on loopback interface for 30 seconds and count number of packets received
    local tshark_pid
    tshark -i lo -f udp -a duration:30 -w /tmp/tshark.pcap &> /dev/null &
    tshark_pid=$!
    sleep 35
    # send sigkill to tshark process if it is still running (the || true is
    # needed because kill returns a non-zero exit code if the process is not
    # running and set -e would cause the script to exit)
    kill -9 $tshark_pid || true

    # count number of packets received
    local num_packets
    num_packets=$(tshark -r /tmp/tshark.pcap | wc -l)

    # if number of received packets is smaller than 100, then exit with code 1
    if [ "$num_packets" -lt 100 ]; then
        echo "Number of packets received: $num_packets is less than expected"
        echo "Restarting grgsm_collector"
        # end grgsm_collector process
        pkill grgsm_livemon
        pkill tshark
        # call grgsm_collector function
        start_tshark
        start_grgsm_livemon
    fi

    # else exit with code 0
    #exit 0
}
# Check if grgsm_livemon is installed
if ! [ -x "$(command -v grgsm_livemon_headless)" ]; then
  echo 'Error: grgsm_livemon is not installed.' >&2
  exit 1
fi

# Check if tshark is installed
if ! [ -x "$(command -v tshark)" ]; then
  echo 'Error: tshark is not installed.' >&2
  exit 1
fi

start_tshark
start_grgsm_livemon

# While loop to run watchdog function every 5 minutes
while true; do
    # Run sleep in background and wait in the foreground to be able to
    # handle signals via the trap defined above.
    sleep 300 &
    wait $!
    watchdog
done
